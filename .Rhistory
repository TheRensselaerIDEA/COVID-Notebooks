+ scale(date_since_social)
+ scale(date_since)
+ scale(date_since_reopen)
+ scale(date_since_reclosure)
+ scale(date_since_mask)
+ scale(pct_obesity)
+ scale(pct_age65) + scale(pct_diabetes)
+ scale(LungCancer)
+ scale(COPD)
+ scale(AdultAsthma)
+ scale(PediatricAsthma)
+ scale(All.Cause.death_rate)
+ (1|state)
+ offset(log(population)), data = aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart,
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
library("MASS")
library("lme4")
library("glmmTMB")
library("gamm4")
library('caret')
library('blmeco')
library(pROC)
library(VineCopula)
library("PerformanceAnalytics")
library(glmmTMB)
library(ggplot2)
library(cvms)
library(sgof)
library(tidyverse)
library(kableExtra)
# set datafile from parallelism
# args <- commandArgs()
# datafile = args[6]
# set datefile by hand
# datafile = '07-06-2020data-2.Rds'
datafile = './Preprocessing_FTS_Outputs/07-12-2020data.Rds'
aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart<-readRDS(datafile)
# aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart <- subset(aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart,
#                                                                       select = c(Deaths, `% Hispanic`, `% Black`, `% Asian`, `% Non-Hispanic White`, `% Native Hawaiian/Other Pacific Islander`, q_popdensity,
#                                                                                  `Median Household Income`, date_since_social, date_since, date_since_reopen, date_since_reclosure, date_since_mask,
#                                                                                  pct_obesity, pct_age65, pct_diabetes, LungCancer, COPD, AdultAsthma, PediatricAsthma, All.Cause.death_rate, state, population))
combined.mode.nb.random.off.main = glmer.nb(Deaths
# ~ scale(`% Hispanic`) + scale(`% Black`) + scale(`% Asian`)
# + scale(`% Non-Hispanic White`) + scale(`% Native Hawaiian/Other Pacific Islander`)
~ scale(`hispanic`) + scale(`pct_blk`) + scale(`pct_asian`)
+ scale(`pct_white`) + scale(`pct_native`)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))
+ scale(log(medianhouseholdincome))
+ scale(date_since_social)
+ scale(date_since)
+ scale(date_since_reopen)
+ scale(date_since_reclosure)
+ scale(date_since_mask)
+ scale(pct_obesity)
+ scale(pct_age65) + scale(pct_diabetes)
+ scale(LungCancer)
+ scale(COPD)
+ scale(AdultAsthma)
+ scale(PediatricAsthma)
+ scale(All.Cause.death_rate)
+ (1|state)
+ offset(log(population)), data = aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart,
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
library("MASS")
library("lme4")
library("glmmTMB")
library("gamm4")
library('caret')
library('blmeco')
library(pROC)
library(VineCopula)
library("PerformanceAnalytics")
library(glmmTMB)
library(ggplot2)
library(cvms)
library(sgof)
library(tidyverse)
library(kableExtra)
# set datafile from parallelism
# args <- commandArgs()
# datafile = args[6]
# set datefile by hand
# datafile = '07-06-2020data-2.Rds'
datafile = './Preprocessing_FTS_Outputs/07-12-2020data.Rds'
aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart<-readRDS(datafile)
# aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart <- subset(aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart,
#                                                                       select = c(Deaths, `% Hispanic`, `% Black`, `% Asian`, `% Non-Hispanic White`, `% Native Hawaiian/Other Pacific Islander`, q_popdensity,
#                                                                                  `Median Household Income`, date_since_social, date_since, date_since_reopen, date_since_reclosure, date_since_mask,
#                                                                                  pct_obesity, pct_age65, pct_diabetes, LungCancer, COPD, AdultAsthma, PediatricAsthma, All.Cause.death_rate, state, population))
combined.mode.nb.random.off.main = glmer.nb(Deaths
# ~ scale(`% Hispanic`) + scale(`% Black`) + scale(`% Asian`)
# + scale(`% Non-Hispanic White`) + scale(`% Native Hawaiian/Other Pacific Islander`)
~ scale(`hispanic`) + scale(`pct_blk`) + scale(`pct_asian`)
+ scale(`pct_white`) + scale(`pct_native`)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))
+ scale(log(medhouseholdincome))
+ scale(date_since_social)
+ scale(date_since)
+ scale(date_since_reopen)
+ scale(date_since_reclosure)
+ scale(date_since_mask)
+ scale(pct_obesity)
+ scale(pct_age65) + scale(pct_diabetes)
+ scale(LungCancer)
+ scale(COPD)
+ scale(AdultAsthma)
+ scale(PediatricAsthma)
+ scale(All.Cause.death_rate)
+ (1|state)
+ offset(log(population)), data = aggregate_pm_census_cdc_test_beds_age_diabete_obesity_heart,
)
summary(combined.mode.nb.random.off.main)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/GWAS_ADJ_P.rds")
View(GWAS_ADJ_P)
View(GWAS_MRR)
rmd_GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/rmd_GWAS_MRR.rds")
View(rmd_GWAS_MRR)
View(rmd_GWAS_MRR)
View(GWAS_MRR)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
4111
rmd_GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/rmd_GWAS_ADJ_P.rds")
View(rmd_GWAS_ADJ_P)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/GWAS_ADJ_P.rds")
`_GWAS_MRR` <- readRDS("~/COVID-Notebooks/GWAS/_GWAS_MRR.rds")
`_GWAS_ADJ_P` <- readRDS("~/COVID-Notebooks/GWAS/_GWAS_ADJ_P.rds")
`_GWAS_MRR` <- readRDS("~/COVID-Notebooks/GWAS/_GWAS_MRR.rds")
View(`_GWAS_MRR`)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
new_GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/new_GWAS_MRR.rds")
GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/GWAS_ADJ_P.rds")
new_GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/new_GWAS_ADJ_P.rds")
View(new_GWAS_MRR)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
# Change the date by hand
date_of_study = "07-06-2020"
# Parallel
# args <- commandArgs()
# date = args[6]
# date_of_study = paste(date,"-2020",sep="")
column_names <- data.frame()
#------------------------------------------------------------------------------------------------------------------------------------------
# Import exposure PM2.5 data
county_pm <- read.csv("./Data/county_pm25.csv")
county_pm$fips = str_pad(county_pm$fips, 5, pad = "0")
# pm2.5 average over 17 years
county_pm_aggregated <- county_pm %>%
filter(!is.na(pm25)) %>%
filter(!is.na(fips)) %>%
group_by(fips) %>%
dplyr::summarise(mean_pm25 = mean(pm25))
ncol(county_pm_aggregated)
chr <- read_csv("Data/2020CHR.csv")
chr <- chr[, -grep("Quartile", colnames(chr))]
chr <- chr[, -grep("95", colnames(chr))]
chr <- chr[, -grep("(AIAN)", colnames(chr))]
chr <- chr[, -grep("(Asian)", colnames(chr))]
chr <- chr[, -grep("(Black)", colnames(chr))]
chr <- chr[, -grep("(Hispanic)", colnames(chr))]
chr <- chr[, -grep("(White)", colnames(chr))]
chr <- subset(chr, select = -c(Deaths, Unreliable, Population))
chr <- dplyr::rename(chr, c("pct_diabetes" = `% Adults with Diabetes`,
"pct_obesity" = `% Adults with Obesity`,
"pct_age65" = `% 65 and over`,
"pre_covid_deaths" = `# Deaths`,
"pre_covid_death_rate" = `Age-Adjusted Death Rate`,
"child_deaths" = `# Deaths_1`,
"infant_deaths" = `# Deaths_2`,
"# less than 18 years of age" = `Population_1`,
"suicide_deaths"= `# Deaths_3`))
chr_names <- data.frame(column = names(chr)[2:235])
chr_names$source <- "chr"
View(chr_names)
# State test and policy
state_test = read.csv(text=getURL("https://covidtracking.com/api/v1/states/daily.csv"))
state_test = subset(state_test, date ==paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))[,-20]
state_test <- subset(state_test, select = -c(date, lastUpdateEt, dateModified, checkTimeEt, dateChecked, hash, grade))
state_test <- state_test[, -grep("Score", colnames(state_test))]
statecode = read_csv("./Data/statecode.csv")
# Import social distancing measure data
distancing <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1894978869")
colnames(distancing)[2] = "state"
colnames(distancing)[4] = "stay_at_home"
reopen <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1269444822')
colnames(reopen)[2] = "state"
colnames(reopen)[4] = "reopen"
closure <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=257109301')
colnames(closure)[2] = "state"
colnames(closure)[4] = "reclosure"
mask <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1489353670')
colnames(mask)[2] = "state"
colnames(mask)[4] = "mask"
# merging data
state_test = merge(state_test,statecode[,c(1,3)],by.x = "state" ,by.y = "Code" )
state_test = merge(state_test,distancing[,c(2,4)],by = "state")
state_test = merge(state_test,reopen[,c(2,4)],by = "state")
state_test = merge(state_test,closure[,c(2,4)],by = "state")
state_test = merge(state_test,mask[,c(2,4)],by = "state")
#state_test$date_since_social = as.numeric(as.Date(Sys.Date()) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test$date_since_social = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_social)==T,]$date_since_social = 0
state_test$date_since_social[state_test$date_since_social < 0] = 0
state_test$date_since_reopen = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reopen, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reopen)==T,]$date_since_reopen = 0
state_test$date_since_reopen[state_test$date_since_reopen < 0] = 0
state_test$date_since_reclosure = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reclosure, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reclosure)==T,]$date_since_reclosure = 0
state_test$date_since_reclosure[state_test$date_since_reclosure < 0] = 0
state_test$date_since_mask = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$mask, "%m/%d/%Y"))))
state_test$date_since_mask[is.na(state_test$date_since_mask)==T] = 0
state_test$date_since_mask[state_test$date_since_mask < 0] = 0
state_test <- subset(state_test, select = -c(dataQualityGrade, fips, score))
state_test <- dplyr::rename(state_test, c(state_deaths = death))
state_test_names <- data.frame(column = names(state_test)[1:ncol(state_test)])
state_test_names$source <- "state_test"
View(state_test_names)
column_names <- readRDS("~/COVID-Notebooks/Preprocessing/column_names.Rds")
View(column_names)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
source("./Modules/Source.R")
# Change the date by hand
date_of_study = "07-06-2020"
# Parallel
# args <- commandArgs()
# date = args[6]
# date_of_study = paste(date,"-2020",sep="")
column_names <- data.frame()
#------------------------------------------------------------------------------------------------------------------------------------------
# Import exposure PM2.5 data
county_pm <- read.csv("./Data/county_pm25.csv")
county_pm$fips = str_pad(county_pm$fips, 5, pad = "0")
# pm2.5 average over 17 years
county_pm_aggregated <- county_pm %>%
filter(!is.na(pm25)) %>%
filter(!is.na(fips)) %>%
group_by(fips) %>%
dplyr::summarise(mean_pm25 = mean(pm25))
county_pm_aggregated_names <- data.frame(column = names(county_pm_aggregated)[2:ncol(county_pm_aggregated)])
county_pm_aggregated_names$source <- "county_pm_aggregated"
column_names <- rbind(column_names, county_pm_aggregated_names)
# temperature and relative humidity average over 17 years
county_temp = read.csv("./Data/temp_seasonal_county.csv")
county_temp$fips = str_pad(county_temp$fips, 5, pad = "0")
county_temp_aggregated = county_temp %>%
group_by(fips) %>%
dplyr::summarise(mean_winter_temp= mean(winter_tmmx, na.rm=TRUE),
mean_summer_temp= mean(summer_tmmx, na.rm=TRUE),
mean_winter_rm= mean(winter_rmax, na.rm=TRUE),
mean_summer_rm= mean(summer_rmax, na.rm=TRUE))
county_temp_aggregated_names <- data.frame(column = names(county_temp_aggregated)[2:ncol(county_temp_aggregated)])
county_temp_aggregated_names$source <- "county_temp_aggregated"
column_names <- rbind(column_names, county_temp_aggregated_names)
aggregate_pm_temp = merge(county_pm_aggregated,county_temp_aggregated,by="fips",all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Historical data
covid_hist = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-30-2020.csv")))
covid_us_hist = subset(covid_hist, Country_Region == "US" & is.na(FIPS)==F)
#covid_us_hist = subset(covid_us_hist, select = -c(Country_Region, Last_Update, Combined_Key))
# Import outcome data from JHU CSSE
covid = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/",date_of_study,".csv")))
covid_us = subset(covid,Country_Region == "US")
covid_us <- rbind.fill(covid_us,subset(covid_us_hist, (!(FIPS %in% covid_us$FIPS))  & Confirmed == 0 & Deaths == 0 & is.na(FIPS)==F))
covid_us$FIPS = str_pad(covid_us$FIPS, 5, pad = "0")
covid_us = subset(covid_us, select = -c(Admin2, Province_State, Country_Region, Last_Update, Combined_Key))
covid_us_names <- data.frame(column = names(covid_us)[2:ncol(covid_us)])
covid_us_names$source <- "covid_us"
column_names <- rbind(column_names, covid_us_names)
aggregate_pm_temp_covid = merge(aggregate_pm_temp,covid_us,by.x="fips",by.y = "FIPS")
#------------------------------------------------------------------------------------------------------------------------------------------
# Import census
county_census <- read.csv(text=getURL("https://raw.githubusercontent.com/wxwx1993/PM_COVID/master/Data/census_county_interpolated.csv"))
county_census <- subset(county_census, select = -c(X))
county_census_aggregated = subset(county_census, year==2016)
county_census_aggregated <- county_census_aggregated[,c(1,3,4,5,7,8,10,11,6,9,12,13,14)]
county_census_aggregated$q_popdensity = 1
quantile_popdensity = quantile(county_census_aggregated$popdensity,c(0.2,0.4,0.6,0.8))
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity<=quantile_popdensity[1]] = 1
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[1] &
county_census_aggregated$popdensity<=quantile_popdensity[2]] = 2
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[2] &
county_census_aggregated$popdensity<=quantile_popdensity[3]] = 3
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[3] &
county_census_aggregated$popdensity<=quantile_popdensity[4]] = 4
county_census_aggregated$q_popdensity[county_census_aggregated$popdensity>quantile_popdensity[4]] = 5
county_census_aggregated$fips = str_pad(county_census_aggregated$fips, 5, pad = "0")
county_census_aggregated_names <- data.frame(column = names(county_census_aggregated)[2:ncol(county_census_aggregated)])
county_census_aggregated_names$source <- "county_census_aggregated"
column_names <- rbind(column_names, county_census_aggregated_names)
aggregate_pm_temp_covid_census = merge(aggregate_pm_temp_covid,county_census_aggregated,by.x="fips",by.y = "fips")
#------------------------------------------------------------------------------------------------------------------------------------------
county_base_mortality = read.table("./Data/county_base_mortality.txt", header = TRUE)
county_old_mortality = read.table("./Data/county_old_mortality.txt", header = TRUE)
county_014_mortality = read.table("./Data/county_014_mortality.txt", header = TRUE)
county_1544_mortality = read.table("./Data/county_1544_mortality.txt", header = TRUE)
county_4564_mortality = read.table("./Data/county_4564_mortality.txt", header = TRUE)
# county base mortality (covid mortality?)
colnames(county_old_mortality)[4] = c("older_Population")
colnames(county_014_mortality)[4] = c("014_Population")
colnames(county_1544_mortality)[4] = c("1544_Population")
colnames(county_4564_mortality)[4] = c("4564_Population")
county_base_mortality = merge(county_base_mortality,county_old_mortality[,c(2,4)] ,by = "County.Code", all.x = T)
county_base_mortality = merge(county_base_mortality,county_014_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality = merge(county_base_mortality,county_1544_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality = merge(county_base_mortality,county_4564_mortality[,c(2,4)] ,by = "County.Code",all.x = T)
county_base_mortality$older_pecent = county_base_mortality$older_Population/county_base_mortality$Population
county_base_mortality$"young_pecent" = county_base_mortality$"014_Population"/county_base_mortality$Population
county_base_mortality$"prime_pecent" = county_base_mortality$"1544_Population"/county_base_mortality$Population
county_base_mortality$"mid_pecent" = county_base_mortality$"4564_Population"/county_base_mortality$Population
county_base_mortality$"older_pecent"[is.na(county_base_mortality$"older_pecent")] = 0
county_base_mortality$"prime_pecent"[is.na(county_base_mortality$"prime_pecent")] = 0
county_base_mortality$"mid_pecent"[is.na(county_base_mortality$"mid_pecent")] = 0
county_base_mortality$"young_pecent"[is.na(county_base_mortality$"young_pecent")] = 0
county_base_mortality$County.Code = str_pad(county_base_mortality$County.Code, 5, pad = "0")
county_base_mortality <- county_base_mortality[,c(1,12:15)]
county_base_mortality_names <- data.frame(column = names(county_base_mortality)[2:ncol(county_base_mortality)])
county_base_mortality_names$source <- "county_base_mortality"
column_names <- rbind(column_names, county_base_mortality_names)
aggregate_pm_temp_covid_census_mortality = merge(aggregate_pm_temp_covid_census,county_base_mortality,by.x = "fips",by.y = "County.Code",all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# County Health Rankings Master dataset
chr <- read_csv("Data/2020CHR.csv")
chr <- chr[, -grep("Quartile", colnames(chr))]
chr <- chr[, -grep("95", colnames(chr))]
chr <- chr[, -grep("(AIAN)", colnames(chr))]
chr <- chr[, -grep("(Asian)", colnames(chr))]
chr <- chr[, -grep("(Black)", colnames(chr))]
chr <- chr[, -grep("(Hispanic)", colnames(chr))]
chr <- chr[, -grep("(White)", colnames(chr))]
chr <- subset(chr, select = -c(Deaths, Unreliable, Population))
chr <- dplyr::rename(chr, c("pct_diabetes" = `% Adults with Diabetes`,
"pct_obesity" = `% Adults with Obesity`,
"pct_age65" = `% 65 and over`,
"pre_covid_deaths" = `# Deaths`,
"pre_covid_death_rate" = `Age-Adjusted Death Rate`,
"child_deaths" = `# Deaths_1`,
"infant_deaths" = `# Deaths_2`,
"# less than 18 years of age" = `Population_1`,
"suicide_deaths"= `# Deaths_3`))
chr_names <- data.frame(column = names(chr)[2:ncol(chr)])
chr_names$source <- "chr"
column_names <- rbind(column_names, chr_names)
#------------------------------------------------------------------------------------------------------------------------------------------
# State test and policy
state_test = read.csv(text=getURL("https://covidtracking.com/api/v1/states/daily.csv"))
state_test = subset(state_test, date ==paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))[,-20]
state_test <- subset(state_test, select = -c(date, lastUpdateEt, dateModified, checkTimeEt, dateChecked, hash, grade))
state_test <- state_test[, -grep("Score", colnames(state_test))]
statecode = read_csv("./Data/statecode.csv")
# Import social distancing measure data
distancing <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1894978869")
colnames(distancing)[2] = "state"
colnames(distancing)[4] = "stay_at_home"
reopen <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1269444822')
colnames(reopen)[2] = "state"
colnames(reopen)[4] = "reopen"
closure <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=257109301')
colnames(closure)[2] = "state"
colnames(closure)[4] = "reclosure"
mask <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1489353670')
colnames(mask)[2] = "state"
colnames(mask)[4] = "mask"
# merging data
state_test = merge(state_test,statecode[,c(1,3)],by.x = "state" ,by.y = "Code" )
state_test = merge(state_test,distancing[,c(2,4)],by = "state")
state_test = merge(state_test,reopen[,c(2,4)],by = "state")
state_test = merge(state_test,closure[,c(2,4)],by = "state")
state_test = merge(state_test,mask[,c(2,4)],by = "state")
#state_test$date_since_social = as.numeric(as.Date(Sys.Date()) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test$date_since_social = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_social)==T,]$date_since_social = 0
state_test$date_since_social[state_test$date_since_social < 0] = 0
state_test$date_since_reopen = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reopen, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reopen)==T,]$date_since_reopen = 0
state_test$date_since_reopen[state_test$date_since_reopen < 0] = 0
state_test$date_since_reclosure = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reclosure, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reclosure)==T,]$date_since_reclosure = 0
state_test$date_since_reclosure[state_test$date_since_reclosure < 0] = 0
state_test$date_since_mask = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$mask, "%m/%d/%Y"))))
state_test$date_since_mask[is.na(state_test$date_since_mask)==T] = 0
state_test$date_since_mask[state_test$date_since_mask < 0] = 0
state_test <- subset(state_test, select = -c(dataQualityGrade, fips, score))
state_test <- dplyr::rename(state_test, c(state_deaths = death))
state_test_names <- data.frame(column = names(state_test)[1:ncol(state_test)])
state_test_names$source <- "state_test"
column_names <- rbind(column_names, state_test_names)
aggregate_chr_policy = merge(chr,state_test,by="State")
aggregate_pm_temp_covid_census_mortality_chr_policy = merge(aggregate_pm_temp_covid_census_mortality, aggregate_chr_policy, by.x = "fips", by.y = "FIPS")
View(aggregate_pm_temp_covid_census_mortality_chr_policy)
View(county_1544_mortality)
View(closure)
View(aggregate_pm_temp_covid_census_mortality_chr_policy)
View(state_test_names)
column_names <- readRDS("~/COVID-Notebooks/Preprocessing/column_names.Rds")
View(column_names)
a <- "(White)"
a
column_names <- readRDS("~/COVID-Notebooks/Preprocessing/column_names.Rds")
View(column_names)
column_names <- readRDS("~/COVID-Notebooks/column_names.Rds")
GWAS_ADJ_P <- readRDS("~/COVID-Notebooks/GWAS/GWAS_ADJ_P.rds")
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
new_GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/new_GWAS_MRR.rds")
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
View(GWAS_P)
View(GWAS_MRR)
GWAS_MRR <- subset(GWAS_MRR, select = c())
View(GWAS_MRR)
GWAS_MRR$TEST = "TEST"
View(GWAS_MRR)
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
GWAS_MRR <- subset(GWAS_MRR, select = c())
GWAS_P <- subset(GWAS_P, select = c())
GWAS_ADJ_P <- subset(GWAS_ADJ_P, select = c())
saveRDS(GWAS_ADJ_P, "GWAS/GWAS_ADJ_P.rds")
saveRDS(GWAS_P, "GWAS/GWAS_P.rds")
saveRDS(GWAS_MRR, "GWAS/GWAS_MRR.rds")
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
View(GWAS_MRR)
names(GWAS_MRR)
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
GWAS_MRR <- subset(GWAS_MRR, select = c())
GWAS_P <- subset(GWAS_P, select = c())
GWAS_ADJ_P <- subset(GWAS_ADJ_P, select = c())
names = c("Infant Mortality Rate", "Cancer.death_rate", "Suicide Rate (Age-Adjusted)", "Assault.death_rate", "Cardiovascular.death_rate",
"Motor Vehicle Mortality Rate", "Drug Overdose Mortality Rate", "All.Cause.death_rate",
"AdultAsthma", "PediatricAsthma", "COPD", "AdultChronicLungDisease",
"% Not Proficient in English", "% Insufficient Sleep", "% Unemployed", "% Long Commute - Drives Alone",
"% With Access to Exercise Opportunities", "% Frequent Mental Distress", "% Smokers", "% Excessive Drinking",
"Overcrowding",
"Average Number of Physically Unhealthy Days", "Social Association Rate", "Segregation index", "Average Daily PM2.5",
"Presence of Water Violation", "Average Grade Performance", "High School Graduation Rate",
"Preventable Hospitalization Rate", "beds", "Other Primary Care Provider Rate",
"% With Annual Mammogram", "% Uninsured", "% Fair or Poor Health", "% Vaccinated", "Chlamydia Rate",
"Mental Health Provider Rate", "HIV Prevalence Rate",
"date_since", "date_since_social", "date_since_reclosure", "date_since_reopen")
names(GWAS_P) = names
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
GWAS_MRR <- subset(GWAS_MRR, select = c())
GWAS_P <- subset(GWAS_P, select = c())
GWAS_ADJ_P <- subset(GWAS_ADJ_P, select = c())
names = c("Infant Mortality Rate", "Cancer.death_rate", "Suicide Rate (Age-Adjusted)", "Assault.death_rate", "Cardiovascular.death_rate",
"Motor Vehicle Mortality Rate", "Drug Overdose Mortality Rate", "All.Cause.death_rate",
"AdultAsthma", "PediatricAsthma", "COPD", "AdultChronicLungDisease",
"% Not Proficient in English", "% Insufficient Sleep", "% Unemployed", "% Long Commute - Drives Alone",
"% With Access to Exercise Opportunities", "% Frequent Mental Distress", "% Smokers", "% Excessive Drinking",
"Overcrowding",
"Average Number of Physically Unhealthy Days", "Social Association Rate", "Segregation index", "Average Daily PM2.5",
"Presence of Water Violation", "Average Grade Performance", "High School Graduation Rate",
"Preventable Hospitalization Rate", "beds", "Other Primary Care Provider Rate",
"% With Annual Mammogram", "% Uninsured", "% Fair or Poor Health", "% Vaccinated", "Chlamydia Rate",
"Mental Health Provider Rate", "HIV Prevalence Rate",
"date_since", "date_since_social", "date_since_reclosure", "date_since_reopen")
for (name in names) {
GWAS_P$placeholder_name <- NA
GWAS_ADJ_P$placeholder_name <- NA
GWAS_MRR$placeholder_name <- NA
names(GWAS_P)[names(GWAS_P) == "placeholder_name"] <- name
names(GWAS_ADJ_P)[names(GWAS_ADJ_P) == "placeholder_name"] <- name
names(GWAS_MRR)[names(GWAS_MRR) == "placeholder_name"] <- name
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
GWAS_MRR <- subset(GWAS_MRR, select = c())
GWAS_P <- subset(GWAS_P, select = c())
GWAS_ADJ_P <- subset(GWAS_ADJ_P, select = c())
names = c("Infant Mortality Rate", "Cancer.death_rate", "Suicide Rate (Age-Adjusted)", "Assault.death_rate", "Cardiovascular.death_rate",
"Motor Vehicle Mortality Rate", "Drug Overdose Mortality Rate", "All.Cause.death_rate",
"AdultAsthma", "PediatricAsthma", "COPD", "AdultChronicLungDisease",
"% Not Proficient in English", "% Insufficient Sleep", "% Unemployed", "% Long Commute - Drives Alone",
"% With Access to Exercise Opportunities", "% Frequent Mental Distress", "% Smokers", "% Excessive Drinking",
"Overcrowding",
"Average Number of Physically Unhealthy Days", "Social Association Rate", "Segregation index", "Average Daily PM2.5",
"Presence of Water Violation", "Average Grade Performance", "High School Graduation Rate",
"Preventable Hospitalization Rate", "beds", "Other Primary Care Provider Rate",
"% With Annual Mammogram", "% Uninsured", "% Fair or Poor Health", "% Vaccinated", "Chlamydia Rate",
"Mental Health Provider Rate", "HIV Prevalence Rate",
"date_since", "date_since_social", "date_since_reclosure", "date_since_reopen")
for (name in names) {
GWAS_P$placeholder_name <- NA
GWAS_ADJ_P$placeholder_name <- NA
GWAS_MRR$placeholder_name <- NA
names(GWAS_P)[names(GWAS_P) == "placeholder_name"] <- name
names(GWAS_ADJ_P)[names(GWAS_ADJ_P) == "placeholder_name"] <- name
names(GWAS_MRR)[names(GWAS_MRR) == "placeholder_name"] <- name
}
