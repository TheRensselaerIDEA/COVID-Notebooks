"pct_obesity" = `% Adults with Obesity`,
"pct_age65" = `% 65 and over`,
"pre_covid_deaths" = `# Deaths`,
"pre_covid_death_rate" = `Age-Adjusted Death Rate`,
"child_deaths" = `# Deaths_1`,
"infant_deaths" = `# Deaths_2`,
"# less than 18 years of age" = `Population_1`,
"suicide_deaths"= `# Deaths_3`))
chr_names <- data.frame(column = names(chr)[2:235])
chr_names$source <- "chr"
column_names <- rbind(column_names, chr_names)
#------------------------------------------------------------------------------------------------------------------------------------------
# State test and policy
state_test = read.csv(text=getURL("https://covidtracking.com/api/v1/states/daily.csv"))
state_test = subset(state_test, date ==paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))[,-20]
state_test <- subset(state_test, select = -c(date, lastUpdateEt, dateModified, checkTimeEt, dateChecked, hash, grade))
state_test <- state_test[, -grep("Score", colnames(state_test))]
statecode = read_csv("./Data/statecode.csv")
# Import social distancing measure data
distancing <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1894978869")
colnames(distancing)[2] = "state"
colnames(distancing)[4] = "stay_at_home"
reopen <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1269444822')
colnames(reopen)[2] = "state"
colnames(reopen)[4] = "reopen"
closure <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=257109301')
colnames(closure)[2] = "state"
colnames(closure)[4] = "reclosure"
mask <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1zu9qEWI8PsOI_i8nI_S29HDGHlIp2lfVMsGxpQ5tvAQ/edit#gid=1489353670')
colnames(mask)[2] = "state"
colnames(mask)[4] = "mask"
# merging data
state_test = merge(state_test,statecode[,c(1,3)],by.x = "state" ,by.y = "Code" )
state_test = merge(state_test,distancing[,c(2,4)],by = "state")
state_test = merge(state_test,reopen[,c(2,4)],by = "state")
state_test = merge(state_test,closure[,c(2,4)],by = "state")
state_test = merge(state_test,mask[,c(2,4)],by = "state")
#state_test$date_since_social = as.numeric(as.Date(Sys.Date()) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test$date_since_social = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$stay_at_home, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_social)==T,]$date_since_social = 0
state_test$date_since_social[state_test$date_since_social < 0] = 0
state_test$date_since_reopen = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reopen, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reopen)==T,]$date_since_reopen = 0
state_test$date_since_reopen[state_test$date_since_reopen < 0] = 0
state_test$date_since_reclosure = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$reclosure, "%m/%d/%Y"))))
state_test[is.na(state_test$date_since_reclosure)==T,]$date_since_reclosure = 0
state_test$date_since_reclosure[state_test$date_since_reclosure < 0] = 0
state_test$date_since_mask = as.numeric(as.Date(strptime(date_of_study, "%m-%d-%Y")) - as.Date((strptime(state_test$mask, "%m/%d/%Y"))))
state_test$date_since_mask[is.na(state_test$date_since_mask)==T] = 0
state_test$date_since_mask[state_test$date_since_mask < 0] = 0
state_test <- subset(state_test, select = -c(dataQualityGrade, fips, score))
state_test <- dplyr::rename(state_test, c(state_deaths = death))
state_test_names <- data.frame(column = names(state_test)[1:35])
state_test_names$source <- "state_test"
state_test_names <- state_test_names[-c(27), ]
column_names <- rbind(column_names, state_test_names)
aggregate_chr_policy = merge(chr,state_test,by="State")
aggregate_pm_temp_covid_census_mortality_chr_policy = merge(aggregate_pm_temp_covid_census_mortality, aggregate_chr_policy, by.x = "fips", by.y = "FIPS")
#------------------------------------------------------------------------------------------------------------------------------------------
# Hospitals
hospitals = read.csv(text=getURL("https://opendata.arcgis.com/datasets/6ac5e325468c4cb9b905f1728d6fbf0f_0.csv?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D"))
hospitals$BEDS[hospitals$BEDS < 0] = NA
county_hospitals_aggregated = hospitals %>%
group_by(COUNTYFIPS) %>%
dplyr::summarise(beds = sum(BEDS, na.rm=TRUE))
county_hospitals_aggregated$COUNTYFIPS = str_pad(county_hospitals_aggregated$COUNTYFIPS, 5, pad = "0")
county_hospitals_aggregated_names <- data.frame(column = names(county_hospitals_aggregated)[2:2])
county_hospitals_aggregated_names$source <- "county_hospitals_aggregated"
column_names <- rbind(column_names, county_hospitals_aggregated_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds = merge(aggregate_pm_temp_covid_census_mortality_chr_policy,county_hospitals_aggregated,by.x = "fips",by.y = "COUNTYFIPS",all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds$beds)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# Import outcome data from JHU CSSE, calculate the timing of the 1st confirmed case for each county
date_of_all = format(seq(as.Date("2020-03-22"), as.Date(strptime(date_of_study,"%m-%d-%Y")), by = "days"),"%m-%d-%Y")
covid_us_daily_confirmed = lapply(date_of_all,
function(date_of_all){
covid_daily = read.csv(text=getURL(paste0("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/",date_of_all,".csv")))
covid_daily = covid_daily[!duplicated(covid_daily$FIPS),]
covid_daily = subset(covid_daily,Country_Region == "US" & is.na(FIPS)!=T & Confirmed >0)
covid_daily = subset(covid_daily,select=c(FIPS))
covid_daily$date_since = as.numeric(as.Date(strptime(date_of_study,"%m-%d-%Y")) - as.Date(strptime(date_of_all, "%m-%d-%Y")))
return(covid_daily)
}
)
covid_county_confirmed <- covid_us_daily_confirmed[[1]]
for (i in 1:length(date_of_all)){
covid_county_confirmed <- rbind.fill(covid_county_confirmed, subset(covid_us_daily_confirmed[[i]], (!(FIPS %in% covid_county_confirmed$FIPS))))
}
covid_county_confirmed$FIPS <- str_pad(covid_county_confirmed$FIPS, 5, pad = "0")
covid_county_confirmed_names <- data.frame(column = names(covid_county_confirmed)[2:2])
covid_county_confirmed_names$source <- "covid_county_confirmed"
column_names <- rbind(column_names, covid_county_confirmed_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds,covid_county_confirmed,
by.x = "fips",by.y = "FIPS", all.x = T)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since[is.na(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first$date_since)] = 0
#------------------------------------------------------------------------------------------------------------------------------------------
# CDC
cdc <- readRDS('MM_data/data/CDC/cdc.data.imputed.Rds')
cdc <- subset(cdc, period == '2015-2017')
cdc <- data.frame(split(cdc, cdc$death_cause))
cdc <- subset(cdc, select = c(All.Cause.county_fips,
All.Cause.death_rate,
Assault.death_rate,
Cancer.death_rate,
Cardiovascular.death_rate,
Despair.death_rate))
cdc <- dplyr::rename(cdc, c(FIPS = All.Cause.county_fips))
cdc_names <- data.frame(column = names(cdc)[2:6])
cdc_names$source <- "cdc"
column_names <- rbind(column_names, cdc_names)
aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first,cdc,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Lung Disease dataset
lungdisease <- read_csv("Data/lungdiseaseestimates_uscounties.csv")
lungdisease$PediatricAsthma         <- lungdisease$PediatricAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultAsthma             <- lungdisease$AdultAsthma / lungdisease$TotalPopulation  * 10^5
lungdisease$COPD                    <- lungdisease$COPD / lungdisease$TotalPopulation  * 10^5
lungdisease$AdultChronicLungDisease <- lungdisease$AdultChronicLungDisease / lungdisease$TotalPopulation  * 10^5
lungdisease$LungCancer              <- lungdisease$LungCancer / lungdisease$TotalPopulation  * 10^5
lungdisease <- subset(lungdisease, select = -c(`State or County`, TotalPopulation))
lungdisease_names <- data.frame(column = names(lungdisease)[2:6])
lungdisease_names$source <- "lungdisease"
column_names <- rbind(column_names, lungdisease_names)
aggregate_data = merge(aggregate_pm_temp_covid_census_mortality_chr_policy_beds_first_cdc, lungdisease,
by.x = "fips",by.y = "FIPS", all.x = T)
#------------------------------------------------------------------------------------------------------------------------------------------
# Import FB survey on covid-like sympton data
script <- getURL("https://raw.githubusercontent.com/cmu-delphi/delphi-epidata/main/src/client/delphi_epidata.R", ssl.verifypeer = FALSE)
eval(parse(text = script))
# Request FB survey data from CMU COVIDcast Delphi Research Group
aggregate_data$cli  =
sapply(aggregate_data$fips,
function(fips){
if (Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]]!="no results"){
return(mean(sapply(Epidata$covidcast('fb-survey', 'smoothed_cli', 'day', 'county', list(Epidata$range(20200401, paste0(substring(str_remove_all(date_of_study, "-"),5,8),substring(str_remove_all(date_of_study, "-"),1,4)))),fips)[[2]],function(i){i$value}),na.rm=T))
}else {return(NA)}})
FB_names <- data.frame(column = c("cli"))
FB_names$source <- "FB"
column_names <- rbind(column_names, FB_names)
#------------------------------------------------------------------------------------------------------------------------------------------
# Saving data frame to Rds file
file = paste("Preprocessing_FTS_Outputs/", date_of_study, "data.Rds",sep = "")
saveRDS(aggregate_data, file)
saveRDS(column_names, "Preprocessing/column_names.Rds")
#------------------------------------------------------------------------------------------------------------------------------------------
# Combine five boroughs of NYC
# aggregatedata[aggregatedata$Admin2=="New York City",]$population =
#   subset(aggregatedata,Admin2=="New York City"& Province_State=="New York")$population +
#   subset(aggregatedata, Admin2=="Bronx"& Province_State=="New York")$population +
#   subset(aggregatedata, Admin2=="Kings"& Province_State=="New York")$population +
#   subset(aggregatedata, Admin2=="Queens"& Province_State=="New York")$population +
#   subset(aggregatedata, Admin2=="Richmond"& Province_State=="New York")$population
# aggregatedata[aggregatedata$Admin2=="New York City",]$beds =
#   subset(aggregatedata,Admin2=="New York City"& Province_State=="New York")$beds +
#   subset(aggregatedata, Admin2=="Bronx"& Province_State=="New York")$beds +
#   subset(aggregatedata, Admin2=="Kings"& Province_State=="New York")$beds +
#   subset(aggregatedata, Admin2=="Queens"& Province_State=="New York")$beds +
#   subset(aggregatedata, Admin2=="Richmond"& Province_State=="New York")$beds
#
# vars <- unlist(lapply(aggregate_data, is.numeric))
#
# aggregatedata[aggregatedata$Admin2=="New York City",][,vars] =
#   sapply(vars,function(var){
#     (subset(aggregatedata,Admin2=="New York City"& Province_State=="New York")[,var] * subset(aggregatedata,Admin2=="New York City"& Province_State=="New York")$population +
#        subset(aggregatedata, Admin2=="Bronx"& Province_State=="New York")[,var]        * subset(aggregatedata,Admin2=="Bronx"& Province_State=="New York")$population +
#        subset(aggregatedata, Admin2=="Kings"& Province_State=="New York")[,var]        * subset(aggregatedata,Admin2=="Kings"& Province_State=="New York")$population +
#        subset(aggregatedata, Admin2=="Queens"& Province_State=="New York")[,var]       * subset(aggregatedata,Admin2=="Queens"& Province_State=="New York")$population +
#        subset(aggregatedata, Admin2=="Richmond"& Province_State=="New York")[,var]     * subset(aggregatedata,Admin2=="Richmond"& Province_State=="New York")$population)/(
#          subset(aggregatedata,Admin2=="New York City"& Province_State=="New York")$population+subset(aggregatedata,Admin2=="Bronx"& Province_State=="New York")$population+
#            subset(aggregatedata, Admin2=="Kings"& Province_State=="New York")$population+ subset(aggregatedata,Admin2=="Queens"& Province_State=="New York")$population +
#            subset(aggregatedata,Admin2=="Richmond"& Province_State=="New York")$population)
#   })
# aggregatedata = subset(aggregatedata, !(Admin2=="Bronx"& Province_State=="New York")&
#                          !(Admin2=="Kings"& Province_State=="New York")&
#                          !(Admin2=="Queens"& Province_State=="New York")&
#                          !(Admin2=="Richmond"& Province_State=="New York"))
#------------------------------------------------------------------------------------------------------------------------------------------
# Import NCHS Urban-Rural Classification Scheme for Counties
# NCHSURCodes2013 = read_csv("./Data/NCHSURCodes2013.csv")
# NCHSURCodes2013$FIPS = str_pad(NCHSURCodes2013$FIPS, 5, pad = "0")
# aggregate_pm_census_cdc_test_beds = merge(aggregate_pm_census_cdc_test_beds,NCHSURCodes2013[,c(1,7)],
#                                           by.x = "fips",by.y="FIPS", all.x = T)
# BRFSS
# county_brfss<-read.csv("Data/analytic_data2020.csv")
# county_brfss <- county_brfss[-c(1), ]
# county_brfss <- subset(county_brfss, select = -c(State.FIPS.Code, County.FIPS.Code, State.Abbreviation, Name, Release.Year, County.Ranked..Yes.1.No.0.))
# county_brfss <- dplyr::rename(county_brfss, c(fips = X5.digit.FIPS.Code))
# county_brfss$fips = str_pad(county_brfss$fips, 5, pad = "0")
# county_brfss <- county_brfss[, -grep("CI", colnames(county_brfss))]
# county_brfss <- county_brfss[, -grep("nreliable", colnames(county_brfss))]
# county_brfss <- county_brfss[, -grep("numerator", colnames(county_brfss))]
# county_brfss <- county_brfss[, -grep("denominator", colnames(county_brfss))]
# county_brfss_names <- data.frame(name = names(county_brfss)[2:223])
# county_brfss_names$source <- "county_brfss"
##### Load packages ####
# List of packages used:
# tidyverse
# sp
# raster
# dplyr
# sf
# stringr
# ggplot2
# grid
# pBrackets
# gridExtra
# lme4
# maps
# glmmTMB
# gamm4
# MASS
# RCurl
# httr
# data.table
# devtools
# NSAPHutils  # For threading w/ big data
# NSAPHplatform
# lubridate
# eatGet      # Saving glmer models to memory      # does not work in this version of R
#~~~~~~~~~~~~~~~ From Shayom's code
# blmeco
# VineCopula
# PerformanceAnalytics
# ggfortify
# foreign
# psych                # Could not find this package during install
# ResourceSelection
# ROCR
# klaR
# heplots
# hermite
# lattice
# boot
# DescTools
# car
# multcompView
# emmeans
# pscl
# robust
# AER
# usmap
# stats
# cluster
libs <- c("tidyverse", "sp", "raster", "ggplot2", "plyr", "dplyr", "sf", "stringr", "grid", "pBrackets", "gridExtra", "lme4", "maps",
"glmmTMB", "gamm4", "MASS", "RCurl", "httr", "data.table", "devtools", "lubridate", "blmeco", "VineCopula", "PerformanceAnalytics",
"ggfortify", "foreign", "ResourceSelection", "ROCR", "klaR", "heplots", "hermite", "lattice", "boot", "DescTools", "car",
"multcompView", "emmeans", "pscl", "robust", "AER", "usmap", "gsheet", "gplots", "stats", "cluster", "ggpubr")
for (lib in libs){
if (!require(lib, character.only = T)) {
install.packages(lib)
}
}
if (!require("NSAPHutils")){
devtools::install_github("NSAPH/NSAPHutils") # need to be accessed via devtools
}
library("tidyverse")
library("sp")
library("raster")
library("ggplot2")
library("plyr")
library("dplyr")
library("sf")
library("stringr")
library("grid")
library("pBrackets")
library("gridExtra")
library("lme4")
library("maps")
library("glmmTMB")
library("gamm4")
library("MASS")
library("RCurl")
library("httr")
library("data.table")
library("devtools")
library("lubridate")
library("blmeco")
library("VineCopula")
library("PerformanceAnalytics")
library("ggfortify")
library("foreign")
library("ResourceSelection")
library("ROCR")
library("klaR")
library("heplots")
library("hermite")
library("lattice")
library("boot")
library("DescTools")
library("car")
library("multcompView")
library("emmeans")
library("pscl")
library("robust")
library("AER")
library("usmap")
library("gsheet")
library("gplots")
library("stats")
library("cluster")
library("NSAPHutils")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
library("MASS")
library("lme4")
library('caret')
library('blmeco')
library(VineCopula)
library(sgof)
library(tidyverse)
library(cvms)
library(pracma)
args <- c("\% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "\% Smokers", "\% With Access to Exercise Opportunities",
args <- c("\% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "\% Smokers", "\% With Access to Exercise Opportunities",
args <- c("% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "% Smokers", "% With Access to Exercise Opportunities",
"# Chlamydia Cases", "Chlamydia Rate", "% Uninsured", "# Primary Care Physicians", "# Mental Health Providers",
"Mental Health Provider Rate", "Mental Health Provider Ratio", "Preventable Hosp. Rate (White)", "% Screened (White)",
"Labor Force", "% Unemployed", "# Households", "Average Daily PM2.5", "Presence of Water Violation", "# Workers who Drive Alone",
"% Long Commute - Drives Alone", "% Frequent Physical Distress", "# HIV Cases", "# Food Insecure", "# Limited Access",
"# Drug Overdose Deaths", "# Motor Vehicle Deaths", "MV Mortality Rate (White)", "% Insufficient Sleep", "# Uninsured_1",
"% Uninsured_1", "# Uninsured_2", "% Uninsured_2", "Other Primary Care Provider Rate", "Average Grade Performance (White)_1",
"Segregation index", "# Homeowners", "# Households with Severe Cost Burden", "# less than 18 years of age",
"% Not Proficient in English", "All.Cause.death_rate", "infant_deaths", "suicide_deaths", "reclosure", "mask", "date_since_social",
"date_since_reopen", "date_since_reclosure", "beds", "date_since_mask", "date_since", "Assault.death_rate", "Cancer.death_rate",
"Cardiovascular.death_rate", "Despair.death_rate", "PediatricAsthma", "AdultAsthma", "COPD", "AdultChronicLungDisease")
interested_var_s <- c(args[6:length(args)])
interested_var = ""
start = 1
for (i in interested_var_s) {
if (start == 1) {
interested_var <- paste(interested_var, i, sep = "")
start = 0
} else {
interested_var <- paste(interested_var, i, sep = " ")
}
}
interested_var <- str_remove_all(interested_var, "[\\\\]")
cat(interested_var)
args <- c("% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "% Smokers", "% With Access to Exercise Opportunities",
"# Chlamydia Cases", "Chlamydia Rate", "% Uninsured", "# Primary Care Physicians", "# Mental Health Providers",
"Mental Health Provider Rate", "Mental Health Provider Ratio", "Preventable Hosp. Rate (White)", "% Screened (White)",
"Labor Force", "% Unemployed", "# Households", "Average Daily PM2.5", "Presence of Water Violation", "# Workers who Drive Alone",
"% Long Commute - Drives Alone", "% Frequent Physical Distress", "# HIV Cases", "# Food Insecure", "# Limited Access",
"# Drug Overdose Deaths", "# Motor Vehicle Deaths", "MV Mortality Rate (White)", "% Insufficient Sleep", "# Uninsured_1",
"% Uninsured_1", "# Uninsured_2", "% Uninsured_2", "Other Primary Care Provider Rate", "Average Grade Performance (White)_1",
"Segregation index", "# Homeowners", "# Households with Severe Cost Burden", "# less than 18 years of age",
"% Not Proficient in English", "All.Cause.death_rate", "infant_deaths", "suicide_deaths", "reclosure", "mask", "date_since_social",
"date_since_reopen", "date_since_reclosure", "beds", "date_since_mask", "date_since", "Assault.death_rate", "Cancer.death_rate",
"Cardiovascular.death_rate", "Despair.death_rate", "PediatricAsthma", "AdultAsthma", "COPD", "AdultChronicLungDisease")
interested_var_s <- "% Fair or Poor Health"
interested_var = ""
start = 1
for (i in interested_var_s) {
if (start == 1) {
interested_var <- paste(interested_var, i, sep = "")
start = 0
} else {
interested_var <- paste(interested_var, i, sep = " ")
}
}
interested_var <- str_remove_all(interested_var, "[\\\\]")
cat(interested_var)
GWAS_MRR <- readRDS("~/COVID-Notebooks/GWAS/GWAS_MRR.rds")
View(GWAS_MRR)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
library("MASS")
library("lme4")
library('caret')
library('blmeco')
library(VineCopula)
library(sgof)
library(tidyverse)
library(cvms)
library(pracma)
args <- c("% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "% Smokers", "% With Access to Exercise Opportunities",
"# Chlamydia Cases", "Chlamydia Rate", "% Uninsured", "# Primary Care Physicians", "# Mental Health Providers",
"Mental Health Provider Rate", "Mental Health Provider Ratio", "Preventable Hosp. Rate (White)", "% Screened (White)",
"Labor Force", "% Unemployed", "# Households", "Average Daily PM2.5", "Presence of Water Violation", "# Workers who Drive Alone",
"% Long Commute - Drives Alone", "% Frequent Physical Distress", "# HIV Cases", "# Food Insecure", "# Limited Access",
"# Drug Overdose Deaths", "# Motor Vehicle Deaths", "MV Mortality Rate (White)", "% Insufficient Sleep", "# Uninsured_1",
"% Uninsured_1", "# Uninsured_2", "% Uninsured_2", "Other Primary Care Provider Rate", "Average Grade Performance (White)_1",
"Segregation index", "# Homeowners", "# Households with Severe Cost Burden", "# less than 18 years of age",
"% Not Proficient in English", "All.Cause.death_rate", "infant_deaths", "suicide_deaths", "reclosure", "mask", "date_since_social",
"date_since_reopen", "date_since_reclosure", "beds", "date_since_mask", "date_since", "Assault.death_rate", "Cancer.death_rate",
"Cardiovascular.death_rate", "Despair.death_rate", "PediatricAsthma", "AdultAsthma", "COPD", "AdultChronicLungDisease")
interested_var <- "% Fair or Poor Health"
sampledata<-readRDS('Preprocessing_FTS_Outputs/07-12-2020data.Rds')
sampledata<-readRDS('./Preprocessing_FTS_Outputs/07-12-2020data.Rds')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "./")
library("MASS")
library("lme4")
library('caret')
library('blmeco')
library(VineCopula)
library(sgof)
library(tidyverse)
library(cvms)
library(pracma)
args <- c("% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "% Smokers", "% With Access to Exercise Opportunities",
"# Chlamydia Cases", "Chlamydia Rate", "% Uninsured", "# Primary Care Physicians", "# Mental Health Providers",
"Mental Health Provider Rate", "Mental Health Provider Ratio", "Preventable Hosp. Rate (White)", "% Screened (White)",
"Labor Force", "% Unemployed", "# Households", "Average Daily PM2.5", "Presence of Water Violation", "# Workers who Drive Alone",
"% Long Commute - Drives Alone", "% Frequent Physical Distress", "# HIV Cases", "# Food Insecure", "# Limited Access",
"# Drug Overdose Deaths", "# Motor Vehicle Deaths", "MV Mortality Rate (White)", "% Insufficient Sleep", "# Uninsured_1",
"% Uninsured_1", "# Uninsured_2", "% Uninsured_2", "Other Primary Care Provider Rate", "Average Grade Performance (White)_1",
"Segregation index", "# Homeowners", "# Households with Severe Cost Burden", "# less than 18 years of age",
"% Not Proficient in English", "All.Cause.death_rate", "infant_deaths", "suicide_deaths", "reclosure", "mask", "date_since_social",
"date_since_reopen", "date_since_reclosure", "beds", "date_since_mask", "date_since", "Assault.death_rate", "Cancer.death_rate",
"Cardiovascular.death_rate", "Despair.death_rate", "PediatricAsthma", "AdultAsthma", "COPD", "AdultChronicLungDisease")
interested_var <- "% Fair or Poor Health"
sampledata <- readRDS('./Preprocessing_FTS_Outputs/07-12-2020data.Rds')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "../")
library("MASS")
library("lme4")
library('caret')
library('blmeco')
library(VineCopula)
library(sgof)
library(tidyverse)
library(cvms)
library(pracma)
sampledata <- readRDS('./Preprocessing_FTS_Outputs/07-12-2020data.Rds')
#for (name in colnames(sampledata)) {
#x <- c(34,35,43,47,52,53,61,62,68,69,70,76,82,94,95,106,119,120, 131,132,153,160,163,165,167,169,176,182,183, 184, 185, 186, 187, 188,200,208,216,236,238,240,256,288, 289,
#       290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304)
#print(length(x))
#for ( i in x) {
#  name = colnames(sampledata)[i]
#  s <- paste("\"",name, "\" ", sep = "")
#  cat(s)
#}
s = paste("INTERESTED VAR = " , interested_var, "\n", sep = "")
cat(s)
sub_sampledata <- subset(sampledata, select = c ("Deaths","hispanic", "pct_blk", "pct_asian", "pct_white", "pct_native", "q_popdensity", "Median Household Income",
"education", "beds", "population", "date_since", "date_since_mask", "State", interested_var))
colnames(sub_sampledata)[ncol(sub_sampledata)] = "i_var"
if (strcmp(unname(sapply(sub_sampledata, typeof)[ncol(sub_sampledata)]), "character")) {
s = paste("starting model with : ", interested_var, "\n", sep="")
cat(s)
In.loop.model=glmer.nb(Deaths ~ scale(hispanic) + scale(pct_blk) + scale(pct_asian) + scale(pct_white) + scale(pct_native)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))+scale(education) + scale(beds/population)
+ scale(date_since)
+ scale(date_since_mask)
+ factor(i_var)
+ (1|State)
+ offset(log(population)), data = sub_sampledata)
} else {
s = paste("starting model with : ", interested_var, "\n", sep="")
cat(s)
In.loop.model=glmer.nb(Deaths ~ scale(hispanic) + scale(pct_blk) + scale(pct_asian) + scale(pct_white) + scale(pct_native)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))+scale(education) + scale(beds/population)
+ scale(date_since)
+ scale(date_since_mask)
+ scale(i_var)
+ (1|State)
+ offset(log(population)), data = sub_sampledata)
}
View(sub_sampledata)
View(sub_sampledata)
GWAS_MRR <- readRDS("GWAS/GWAS_MRR.rds")
GWAS_P <- readRDS("GWAS/GWAS_P.rds")
GWAS_ADJ_P <- readRDS("GWAS/GWAS_ADJ_P.rds")
saveRDS(GWAS_ADJ_P, "GWAS/test_GWAS_ADJ_P.rds")
saveRDS(GWAS_P, "GWAS/test_GWAS_P.rds")
saveRDS(GWAS_MRR, "GWAS/test_GWAS_MRR.rds")
args <- c("% Fair or Poor Health", "Average Number of Physically Unhealthy Days", "% Smokers", "% With Access to Exercise Opportunities",
"# Chlamydia Cases", "Chlamydia Rate", "% Uninsured", "# Primary Care Physicians", "# Mental Health Providers",
"Mental Health Provider Rate", "Mental Health Provider Ratio", "Preventable Hosp. Rate (White)", "% Screened (White)",
"Labor Force", "% Unemployed", "# Households", "Average Daily PM2.5", "Presence of Water Violation", "# Workers who Drive Alone",
"% Long Commute - Drives Alone", "% Frequent Physical Distress", "# HIV Cases", "# Food Insecure", "# Limited Access",
"# Drug Overdose Deaths", "# Motor Vehicle Deaths", "MV Mortality Rate (White)", "% Insufficient Sleep", "# Uninsured_1",
"% Uninsured_1", "# Uninsured_2", "% Uninsured_2", "Other Primary Care Provider Rate", "Average Grade Performance (White)_1",
"Segregation index", "# Homeowners", "# Households with Severe Cost Burden", "# less than 18 years of age",
"% Not Proficient in English", "All.Cause.death_rate", "infant_deaths", "suicide_deaths", "reclosure", "mask", "date_since_social",
"date_since_reopen", "date_since_reclosure", "beds", "date_since_mask", "date_since", "Assault.death_rate", "Cancer.death_rate",
"Cardiovascular.death_rate", "Despair.death_rate", "PediatricAsthma", "AdultAsthma", "COPD", "AdultChronicLungDisease")
interested_var <- "% Fair or Poor Health"
sampledata <- readRDS('./Preprocessing_FTS_Outputs/07-12-2020data.Rds')
s = paste("INTERESTED VAR = " , interested_var, "\n", sep = "")
cat(s)
sub_sampledata <- subset(sampledata, select = c ("Deaths","hispanic", "pct_blk", "pct_asian", "pct_white", "pct_native", "q_popdensity", "Median Household Income",
"education", "beds", "population", "date_since", "date_since_mask", "State", interested_var))
colnames(sub_sampledata)[ncol(sub_sampledata)] = "i_var"
if (strcmp(unname(sapply(sub_sampledata, typeof)[ncol(sub_sampledata)]), "character")) {
s = paste("starting model with : ", interested_var, "\n", sep="")
cat(s)
In.loop.model=glmer.nb(Deaths ~ scale(hispanic) + scale(pct_blk) + scale(pct_asian) + scale(pct_white) + scale(pct_native)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))+scale(education) + scale(beds/population)
+ scale(date_since)
+ scale(date_since_mask)
+ factor(i_var)
+ (1|State)
+ offset(log(population)), data = sub_sampledata)
} else {
s = paste("starting model with : ", interested_var, "\n", sep="")
cat(s)
In.loop.model=glmer.nb(Deaths ~ scale(hispanic) + scale(pct_blk) + scale(pct_asian) + scale(pct_white) + scale(pct_native)
+ factor(q_popdensity)
+ scale(log(`Median Household Income`))+scale(education) + scale(beds/population)
+ scale(date_since)
+ scale(date_since_mask)
+ scale(i_var)
+ (1|State)
+ offset(log(population)), data = sub_sampledata)
}
